// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// IB
double IB(const arma::sp_mat& W, const arma::vec& s);
RcppExport SEXP _SystematicSampling_IB(SEXP WSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(IB(W, s));
    return rcpp_result_gen;
END_RCPP
}
// distUnitk
arma::vec distUnitk(arma::mat X, int k, bool tore, double toreBound);
RcppExport SEXP _SystematicSampling_distUnitk(SEXP XSEXP, SEXP kSEXP, SEXP toreSEXP, SEXP toreBoundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< bool >::type tore(toreSEXP);
    Rcpp::traits::input_parameter< double >::type toreBound(toreBoundSEXP);
    rcpp_result_gen = Rcpp::wrap(distUnitk(X, k, tore, toreBound));
    return rcpp_result_gen;
END_RCPP
}
// distUnita
arma::vec distUnita(arma::mat X, arma::mat a, bool tore, double toreBound);
RcppExport SEXP _SystematicSampling_distUnita(SEXP XSEXP, SEXP aSEXP, SEXP toreSEXP, SEXP toreBoundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type a(aSEXP);
    Rcpp::traits::input_parameter< bool >::type tore(toreSEXP);
    Rcpp::traits::input_parameter< double >::type toreBound(toreBoundSEXP);
    rcpp_result_gen = Rcpp::wrap(distUnita(X, a, tore, toreBound));
    return rcpp_result_gen;
END_RCPP
}
// sb_vk
arma::vec sb_vk(arma::vec pik, arma::mat X, arma::vec s, bool tore, double toreBound);
RcppExport SEXP _SystematicSampling_sb_vk(SEXP pikSEXP, SEXP XSEXP, SEXP sSEXP, SEXP toreSEXP, SEXP toreBoundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pik(pikSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< bool >::type tore(toreSEXP);
    Rcpp::traits::input_parameter< double >::type toreBound(toreBoundSEXP);
    rcpp_result_gen = Rcpp::wrap(sb_vk(pik, X, s, tore, toreBound));
    return rcpp_result_gen;
END_RCPP
}
// systematicDesign
Rcpp::List systematicDesign(arma::vec pik);
RcppExport SEXP _SystematicSampling_systematicDesign(SEXP pikSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pik(pikSEXP);
    rcpp_result_gen = Rcpp::wrap(systematicDesign(pik));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SystematicSampling_IB", (DL_FUNC) &_SystematicSampling_IB, 2},
    {"_SystematicSampling_distUnitk", (DL_FUNC) &_SystematicSampling_distUnitk, 4},
    {"_SystematicSampling_distUnita", (DL_FUNC) &_SystematicSampling_distUnita, 4},
    {"_SystematicSampling_sb_vk", (DL_FUNC) &_SystematicSampling_sb_vk, 5},
    {"_SystematicSampling_systematicDesign", (DL_FUNC) &_SystematicSampling_systematicDesign, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_SystematicSampling(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
